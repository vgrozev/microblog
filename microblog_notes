https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world

****************************************************************************************************************************************
****************************************************************************************************************************************
---->  1

---------
mkdir microblog
cd microblog
python3 -m venv venv
source venv/bin/activate

pip install --upgrade pip
pip install flask
---------

mkdir app

vim app/__init__.py

	from flask import Flask

	app = Flask(__name__)

	from app import routes

-----------

vim app/routes.py

	from app import app
	
	@app.route('/')
	@app.route('/index')
	def index():
	return "Hello, World"

-------------

vim microblog.py

	from app import app
	
-------------
============

microblog/
  venv/
  app/
    __init__.py
    routes.py
  microblog.py

  ============

(venv) $ export FLASK_APP=microblog.py
(venv) $ flask run

-->  
	Since environment variables aren't remembered across terminal sessions, 
	you may find tedious to always have to set the FLASK_APP environment variable 
	when you open a new terminal window. Starting with version 1.0, Flask allows you to register 
	environment variables that you want to be automatically imported when you run the flask command. 
	To use this option you have to install the python-dotenv package:
	
	pip install python-dotenv

	vim .flaskenv
		FLASK_APP=microblog.py

****************************************************************************************************************************************
****************************************************************************************************************************************
---->  2

-----------

vim app/routes.py

from app import app

	@app.route('/')
	@app.route('/index')
	def index():
	
	user = {'username': 'Migel'}
	return '''
	
	<html>
		<head>
			<title>Home Page - Microblog</title>
		</head>
		<body>
			<h1>Hello, ''' + user['username'] + '''!</h1>
		</body>
	</html>'''

-------------

(venv) $ mkdir app/templates

-------------

app/templates/index.html
---

<html>
	<head>
		<title>{{ title }} - Microblog</title>
	</head>
	<body>
		<h1>Hello, {{ user.username }}!</h1>
	</body>
</html>

-------------

vim app/routes.py

	from flask import render_template
	from app import app

	@app.route('/')
	@app.route('/index')
	def index():

		user = {'username': 'Migel'}
		return render_template('index.html', title='Home', user=user)

-------------
====================================
app/templates/index.html: Conditional statement in template
---

<html>
    <head>
        {% if title %}
        <title>{{ title }} - Microblog</title>
        {% else %}
        <title>Welcome to Microblog!</title>
        {% endif %}
    </head>
    <body>
        <h1>Hello, {{ user.username }}!</h1>
    </body>
</html>
====================================

app/routes.py: Fake posts in view function
---

from flask import render_template
from app import app

@app.route('/')
@app.route('/index')
def index():
    user = {'username': 'Miguel'}
    posts = [
        {
            'author': {'username': 'John'},
            'body': 'Beautiful day in Portland!'
        },
        {
            'author': {'username': 'Susan'},
            'body': 'The Avengers movie was so cool!'
        }
    ]
    return render_template('index.html', title='Home', user=user, posts=posts)
    
 ====================================  
 app/templates/base.html: Base template with navigation bar
---

<html>
    <head>
      {% if title %}
      <title>{{ title }} - Microblog</title>
      {% else %}
      <title>Welcome to Microblog</title>
      {% endif %}
    </head>
    <body>
        <div>Microblog: <a href="/index">Home</a></div>
        <hr>
        {% block content %}{% endblock %}
    </body>
</html>

====================================

app/templates/index.html: Inherit from base template
---

{% extends "base.html" %}

{% block content %}
    <h1>Hi, {{ user.username }}!</h1>
    {% for post in posts %}
    <div><p>{{ post.author.username }} says: <b>{{ post.body }}</b></p></div>
    {% endfor %}
{% endblock %}

====================================

****************************************************************************************************************************************
****************************************************************************************************************************************
https://flask-wtf.readthedocs.io/en/stable/

---->  3

-------------
(venv) $ pip install flask-wtf
-------------
====================================
config.py: Secret key configuration
---

import os

class Config(object):
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'
    
====================================

app/__init__.py: Flask configuration
---

from flask import Flask
from config import Config

app = Flask(__name__)
app.config.from_object(Config)

from app import routes

====================================
************
# check the value of the secret key

(venv) |00:29:23|vlado@vlado-mnj:[microblog]> python
Python 3.8.1 (default, Jan 22 2020, 06:38:00)
[GCC 9.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> from microblog import app
>>> app.config['SECRET_KEY']
'you-will-never-guess'
>>>
************

====================================

app/forms.py: Login form
---

from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField
from wtforms.validators import DataRequired

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    remember_me = BooleanField('Remember Me')
    submit = SubmitField('Sign In')
 
====================================

app/templates/login.html: Login form template
---

{% extends "base.html" %}

{% block content %}
    <h1>Sign In</h1>
    <form action="" method="post" novalidate>
        {{ form.hidden_tag() }}
        <p>
            {{ form.username.label }}<br>
            {{ form.username(size=32) }}
        </p>
        <p>
            {{ form.password.label }}<br>
            {{ form.password(size=32) }}
        </p>
        <p>{{ form.remember_me() }} {{ form.remember_me.label }}</p>
        <p>{{ form.submit() }}</p>
    </form>
{% endblock %}

The form.hidden_tag() template argument generates a hidden field that includes a token 
that is used to protect the form against CSRF attacks. All you need to do to have the form protected 
is include this hidden field and have the SECRET_KEY variable defined in the Flask configuration. 
If you take care of these two things, Flask-WTF does the rest for you.


